generator Client {
  provider = "prisma-client-js"
}

datasource Db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CartItem {
  id               String         @id @default(uuid())
  qty              Int            @default(1)
  rate             Int //todo: store rate,amount directly or compute fields
  amount           Int
  product          Product        @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId        String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Restrict)
  productVariantId String
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId           String
  isSavedForLater  Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([productId, productVariantId, cartId])
}

model Seller {
  id              String           @id @default(uuid())
  name            String
  pic             String
  phoneNumber     String           @unique
  email           String           @unique
  description     String
  // contactInfo     SellerContactInfo? // relation's are required by default 
  address         SellerAddress? // todo : app logic to make contact,address mandatory
  sellerFeedbacks SellerFeedback[]
  products        Product[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // rating , ratingCont : compute with calculated fields / complex queries 
}

model WishlistItem {
  id               String         @id @default(uuid())
  qty              Int            @default(1)
  rate             Int //todo: store rate,amount directly or compute fields
  amount           Int
  product          Product        @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId        String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Restrict)
  productVariantId String
  wishlist         Wishlist       @relation(fields: [wishlistId], references: [id], onDelete: Restrict)
  wishlistId       String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([productId, productVariantId, wishlistId])
}

model Wishlist {
  id            String         @id @default(uuid())
  wishlistItems WishlistItem[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @unique
}

enum UserRole {
  SELLER
  USER
  ADMIN
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  cartItems CartItem[]
}

model BaseAddress {
  id              String           @id @default(uuid())
  addressLine1    String
  street          String
  landmark        String
  city            String
  state           String
  zipCode         String
  country         String           @default("India")
  type            AddressType // discriminator
  SellerAddress   SellerAddress?
  UserAddress     UserAddress?
  ShippingAddress ShippingAddress?
}

enum AddressType {
  SellerAddress
  UserAddress
  ShippingAddress
}

model SellerAddress {
  id        String      @id @default(uuid())
  address   BaseAddress @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String      @unique
  sellerId  String      @unique
  seller    Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model UserAddress {
  id        String      @id @default(uuid())
  address   BaseAddress @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String      @unique
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ShippingAddress {
  id                String          @id @default(uuid())
  address           BaseAddress     @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId         String          @unique
  shippingDetails   ShippingDetails @relation(fields: [shippingDetailsId], references: [id], onDelete: Cascade)
  shippingDetailsId String          @unique
}

model ShippingDetails {
  id                  String                           @id @default(uuid())
  address             ShippingAddress?
  user                User                             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  type                ShippingDetailsType
  weekendPreference   ShippingDetailsWeekendPreference
  locationInstruction String
  orders              Order[]
  createdAt           DateTime                         @default(now())
  updatedAt           DateTime                         @updatedAt
}

enum ShippingDetailsType {
  HOME
  WORK
}

enum ShippingDetailsWeekendPreference {
  BOTH
  SATUDAY
  SUNDAY
}

model SellerFeedback {
  id                String           @id @default(uuid())
  order             Order            @relation(fields: [orderId], references: [id], onDelete: Restrict)
  orderId           String
  seller            Seller           @relation(fields: [sellerId], references: [id], onDelete: Restrict)
  sellerId          String
  rating            Int
  badRatingReason   BadRatingReason? @relation(fields: [badRatingReasonId], references: [id], onDelete: SetNull)
  badRatingReasonId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([orderId, sellerId]) // for an order , each seller can have one feedback
}

model BadRatingReason {
  id              String           @id @default(uuid())
  sellerFeedbacks SellerFeedback[]
  reason          String
}

model User {
  id                 String              @id @default(uuid())
  name               String
  pic                String
  phoneNumber        String              @unique
  email              String              @unique
  shippingAddresses  ShippingDetails[]
  orders             Order[]
  productReviews     ProductReview[]
  Wishlist           Wishlist?
  cart               Cart?
  address            UserAddress?
  // contactInfo        UserContactInfo? //todo : app logic(if needed) to make this field mandatory
  searchTerms        SearchTerm[]
  userToSearchTerms  UserToSearchTerm[]
  userToProductViews UserToProductView[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

// model SellerContactInfo {
//   id          String @id @default(uuid())
//   phoneNumber String @unique
//   email       String @unique
//   sellerId    String @unique
//   seller      Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
// }

// model UserContactInfo {
//   id          String @id @default(uuid())
//   phoneNumber String @unique
//   email       String @unique
//   userId      String @unique
//   user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model SearchTerm {
  id                String             @id @default(uuid())
  term              String             @unique
  orderItems        OrderItem[]
  searchers         User[]
  userToSearchTerms UserToSearchTerm[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model UserToSearchTerm {
  id             String     @id @default(uuid())
  searcher       User?      @relation(fields: [searcherId], references: [id], onDelete: SetNull) // required at creation
  searcherId     String?
  SearchTerm     SearchTerm @relation(fields: [searcherTermId], references: [id], onDelete: Cascade)
  searcherTermId String
  searchCount    Int        @default(1) //todo: app logic to increment it on re-search
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@unique([searcherId, searcherTermId])
}

model OrderItem {
  id               String         @id @default(uuid())
  qty              Int            @default(1)
  rate             Int //todo: store rate,amount directly because prices can product change in future
  amount           Int
  // relationship
  searchTerm       SearchTerm?    @relation(fields: [searcherTermId], references: [id], onDelete: SetNull)
  searcherTermId   String?
  product          Product        @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId        String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Restrict)
  productVariantId String
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Restrict)
  orderId          String
  ProductReview    ProductReview?

  @@unique([orderId, productId, productVariantId]) // unique sku's within an order
}

model UserToProductView {
  id               String          @id @default(uuid())
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: SetNull) //todo:app logic : at create , field is mandatory
  productVariantId String?
  userId           String
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewCount        Int             @default(1) // can increase on revisit
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@unique([userId, productId, productVariantId]) //track sku for users
}

model Order {
  id                String           @id @default(uuid())
  user              User?            @relation(fields: [userId], references: [id], onDelete: SetNull) // mandatory at creation
  userId            String?
  sellerFeedbacks   SellerFeedback[]
  orderItems        OrderItem[]
  shippingDetails   ShippingDetails? @relation(fields: [shippingDetailsId], references: [id], onDelete: SetNull) // mandatory at creation
  shippingDetailsId String?
  amount            Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ProductAdditionalInfo {
  id        String                 @id @default(uuid())
  product   Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  key       String
  value     String
  datatype  AdditionalInfoDataType
  infoType  AdditionalInfoType

  @@unique([productId, key, value])
}

model ProductVariantAdditionalInfo {
  id               String                 @id @default(uuid())
  productVariant   ProductVariant         @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String
  key              String
  value            String
  datatype         AdditionalInfoDataType
  infoType         AdditionalInfoType

  @@unique([productVariantId, key, value])
}

enum AdditionalInfoDataType {
  TEXT
  NUMBER
  BOOLEAN
  DATE
}

enum AdditionalInfoType {
  FEATURE
  DETAIL
}

// ==============
model Category {
  id            String                 @id @default(uuid())
  name          String                 @unique
  slug          String                 @unique
  searchability CategorySearchability? //todo: App logic to make this mandatory

  brands                       Brand[]
  children                     Category[]                    @relation("SubCategories")
  parent                       Category?                     @relation("SubCategories", fields: [parentId], references: [id], onDelete: Cascade)
  parentId                     String?
  categoryToBrands             CategoryToBrand[]
  categoryAttributes           CategoryAttribute[]
  categoryToCategoryAttributes CategoryToCategoryAttribute[]
  products                     Product[]
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
}

model CategoryAttribute {
  id                           String                        @id @default(uuid())
  displayName                  String //ex:size
  internalName                 String //ex: t-shirt size
  possibleValues               String[] //this is optional
  description                  String?
  categories                   Category[]
  categoryToCategoryAttributes CategoryToCategoryAttribute[]
  productVariantToAttributes   ProductVariantToAttribute[]

  @@unique([displayName, internalName])
}

//todo: follow below naming :  for bridge tables
model CategoryToCategoryAttribute {
  id                  String            @id @default(uuid())
  category            Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId          String
  categoryAttribute   CategoryAttribute @relation(fields: [categoryAttributeId], references: [id], onDelete: Cascade)
  categoryAttributeId String

  @@unique([categoryId, categoryAttributeId])
}

model CategorySearchability {
  id String @id @default(uuid())

  metadata    String?
  description String
  tags        String[] @default([])
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String   @unique
}

model Brand {
  id               String            @id @default(uuid())
  name             String
  description      String?
  categories       Category[]
  categoryToBrands CategoryToBrand[]
  products         Product[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model CategoryToBrand {
  id         String   @id @default(uuid())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  brand      Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId    String

  @@unique([categoryId, brandId])
}

// ==============
model ReviewMediaUrl {
  id              String        @id @default(uuid())
  productReview   ProductReview @relation(fields: [productReviewId], references: [id], onDelete: Cascade)
  productReviewId String
  type            MediaUrlType
  url             String        @unique
}

enum MediaUrlType {
  IMAGE
  VIDEO
}

//todo: figure out how to fetch attributes that differentiate variants , needed initially on products page
model Product {
  name                   String
  pics                   String[]
  id                     String                  @id @default(uuid())
  brand                  Brand                   @relation(fields: [brandId], references: [id], onDelete: Restrict)
  brandId                String
  category               Category                @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId             String
  cartItems              CartItem[]
  wishlistItems          WishlistItem[]
  seller                 Seller                  @relation(fields: [sellerId], references: [id], onDelete: Restrict)
  sellerId               String
  orderItems             OrderItem[]
  userToProductViews     UserToProductView[]
  additionalInformations ProductAdditionalInfo[]
  productSearchability   ProductSearchability? //send to frontend on view product page , can be used to fetch similar products

  productVariants ProductVariant[]
  // status          ProductStatus?   @relation(fields: [statusName], references: [status], onUpdate: Cascade, onDelete: Restrict)
  statusName      String?          @default("active")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProductSearchability {
  id          String   @id @default(uuid())
  description String
  metadata    String?
  tags        String[]
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String   @unique
}

model ProductVariantToAttribute {
  id                  String            @id @default(uuid())
  categoryAttribute   CategoryAttribute @relation(fields: [categoryAttributeId], references: [id], onDelete: Restrict)
  categoryAttributeId String
  productVariant      ProductVariant    @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId    String
  value               String

  @@unique([categoryAttributeId, productVariantId, value])
}

model ProductVariant {
  pics                        String[]
  id                          String                         @id @default(uuid())
  price                       Int
  // status                      ProductStatus?                 @relation(fields: [statusName], references: [status], onUpdate: Cascade, onDelete: Restrict)
  statusName                  String?                        @default("active")
  cartItems                   CartItem[]
  wishlistItems               WishlistItem[]
  orderitems                  OrderItem[]
  userToProductViews          UserToProductView[]
  additionalInformations      ProductVariantAdditionalInfo[]
  product                     Product                        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId                   String
  isDefaultVariant            Boolean                        @default(false)
  productVariantToAttributes  ProductVariantToAttribute[]
  productVariantSearchability ProductVariantSearchability? //mandatory

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// enum ProductStatus {
//   ACTIVE          // The product is currently available for purchase.
//   INACTIVE // temporarily unavailable
//   COMING_SOON     // The product will be available for purchase soon.
//   DISCONTINUED    // no longer being sold ,but might still be visible to purchasers
//   //seller can delete product if it's not purchased 
// }

model ProductStatus {
  id          String @id @default(uuid())
  status      String @unique
  description String
  // products        Product[]
  // productVariants ProductVariant[]
}

model ProductVariantSearchability {
  id               String         @id @default(uuid())
  description      String
  metadata         String?
  tags             String[]
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String         @unique
}

model ProductReview {
  id          String           @id @default(uuid())
  mediaUrls   ReviewMediaUrl[]
  orderItem   OrderItem        @relation(fields: [orderItemId], references: [id], onDelete: Restrict)
  orderItemId String           @unique
  User        User?            @relation(fields: [userId], references: [id], onDelete: SetNull) //mandatory at creation , for simplifying query and performance , otherwise orderItem -> order -> user ,downside : data redundancy
  userId      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}
